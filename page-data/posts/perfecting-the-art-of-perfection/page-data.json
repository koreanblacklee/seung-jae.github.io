{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/perfecting-the-art-of-perfection/","webpackCompilationHash":"2e55fb44585176c743ac","result":{"data":{"markdownRemark":{"id":"91417163-5cdf-5e24-ba2b-68c578ab59b7","html":"<p>(읽기 쉽고, 쉽게 표현하기 위해 경어를 사용한 점 양해부탁드립니다.)</p>\n<p>며칠동안 전전긍긍하던 파이썬 로그인 데코레이터를 완료하였고, 구현하는 과정 및 결과에 대해 포스팅 해보려 한다. 개발을 배우는 입장에서 정리를 하다보니 부족한 부분이 있을 수 있으니 양해바란다.</p>\n<p><img src=\"/media/image-2.jpg\" alt=\"Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus\"></p>\n<p>데코레이터 구현을 위해 인터넷을 계속 찾아다녀봤지만, pyJWT를 이용한 구현은 찾아보기가 힘들었고, 오늘 배운것을 정리하는 것과 pyJWT를 통한 인증구현이 필요한 사람을 위해 정리하려 한다.  </p>\n<p>먼저 JWT는,<br>\nJavaScript를 이용해 유저가 웹사이트에 로그인 한 후에 발생하는 이벤트(댓글, 게시판 글쓰기 등), 여러가지 서비스를 이용하기 위한 권한을 가진 유저인지 확인하기 위해서 많이 쓰이고 있다고 한다.\n총 3개의 구문으로 되어있고, 헤더.내용.서명 으로 이루어져 있다.\n(자세한 내용은 <a href=\"https://jwt.io/\">JWT</a>공식홈페이지나 다른 사이트를 참고해주길 바란다.)</p>\n<p>혹여나 데코레이터가 뭔지 모르는 분들을 위해 설명드리자면,<br>\n대상 함수를 wrapping하고, 이 함수 앞뒤로 꾸며질 구문들에 대해 손쉽게 재사용할 수 있도록 다른 곳에 미리 함수를 만들어 둔 것이라고만 알고 있으면 될 듯 하다. 이번 프로젝트를 예로 들자면, 회원이 댓글작성이나 특정권한을 가지고 있는지 확인하기 위해 데코레이터를 구현했다.<br>\nex)사용예시</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@decorator\ndef comment:\n  ~~~</code></pre></div>\n<p>(더 전문적인 설명이 필요하다면 <a href=\"https://www.python.org/dev/peps/pep-0318/\">파이썬</a> 공식홈페이지나 구글링을 해보길 권한다.)</p>\n<p>개발순서는 회원가입, 로그인을 이미 구현한 상태이고, 데코레이터를 구현해야 하는데 먼저 목적과 로직을 디테일하게 작성한 내용을 먼저 얘기해보겠다.</p>\n<h3 id=\"구현하고자-하는-데코레이터의-목적\"><a href=\"#%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0%EC%9E%90-%ED%95%98%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"구현하고자 하는 데코레이터의 목적 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현하고자 하는 데코레이터의 목적</h3>\n<p>웹사이트 상에서 권한(로그인, 혹은 관리자)을 가진 유저만 이용가능한 서비스를 이용할 수 곳에 한해서, 유저가 로그인한 유저인지, 이용가능한 권한을 가진 유저인지(게시판 글쓰기, 관리자페이지 이용권한, 포스팅 작성 등) 등을 확인하기 위해서 미리 선언해 둔 함수를 사용하기 위한 목적 </p>\n<h3 id=\"세부-로직\"><a href=\"#%EC%84%B8%EB%B6%80-%EB%A1%9C%EC%A7%81\" aria-label=\"세부 로직 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세부 로직</h3>\n<p>유저로그인: 프론트엔드에게 해당 아이디로 발행한 암호화된 jwt토큰을 전달</p>\n<ol>\n<li>해당유저의 정보를 확인하기 위해 프론트엔드에서 HTTP 헤더를 통해 토큰을 전달 받기<br>\n=>만약 토큰이 없다면 서버에서는 에러코드를 프론트엔드에게 전달하고, 유저의 현재 페이지를 로그인페이지로 이동해달라고 프론트엔드에게 요청</li>\n<li>백엔드는 암호화되어 전달받은 jwt토큰을 decode하고<br>\n=> decode에서 오류가 난다면, 해당 웹페이지에서 발행한 토큰이 아니므로, INVALID_TOKEN 에러를 프론트엔드에게 전달</li>\n<li>Django models.py에 저장된 데이터와 decode한 데이터가 일치하는 회원의 정보를 변수에 저장<br>\n=> 유저의 정보가 없다면, UNKNOWN_USER라는 에러메세지를 프론트엔드에게 전달</li>\n<li>request할 객체에 user변수를 저장하여 프론트엔드에게 전달</li>\n<li>위 내용이 잘 실행되는지 httpie나 다른 방법으로 테스트 및 검증진행</li>\n</ol>\n<p>더 자세한 사항은 코드 밑에 써두도록 하겠다.  </p>\n<h3 id=\"코딩-순서\"><a href=\"#%EC%BD%94%EB%94%A9-%EC%88%9C%EC%84%9C\" aria-label=\"코딩 순서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 순서</h3>\n<p>(세부로직 순서에 맞게 작성)</p>\n<ol start=\"0\">\n<li>pyJWT설치\n<code class=\"language-text\">pip install pyJWT</code> 및 django app디렉토리에서 utils.py 파일 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def login_decorator(func):\n\n    def wrapper(self, request, *args, **kwargs): # self &gt; 받아온 함수를 다시 넘긴다 access token이 헤더에 들어있음&gt; json.load가 아님(헤더에 있는 값만 할 것임) &gt; 키 벨류로 돼있는 양식 &gt; \n    \n        if &quot;Authorization&quot; not in request.headers: #1)번\n            return JsonResponse({&quot;error_code&quot;:&quot;INVALID_LOGIN&quot;}, status=401)\n        \n        encode_token = request.headers[&quot;Authorization&quot;] \n\n        try:\n            data = jwt.decode(encode_token, wef_key, algorithm=&#39;HS256&#39;) \n            #2번)decode를 하게 될 경우 프론트엔드에 전달했던 페이로드값만 나옴(즉 로그인뷰에 바디)\n\n            user = User.objects.get(id = data[&quot;id&quot;])#3번\n            request.user = user #4번\n        except jwt.DecodeError: #2-1번 error\n            return JsonResponse({\n                &quot;error_code&quot; : &quot;INVALID_TOKEN&quot;\n            }, status = 401) # 401에러 : 권한이 없을때 발생\n        except User.DoesNotExist:#1-1번 error\n            return JsonResponse({\n                &quot;error_code&quot; : &quot;UNKNOWN_USER&quot;\n            }, status = 401) # 401에러 : 권한이 없을때 발생\n\n        return func(self, request, *args, **kwargs) #5번\n\n    return wrapper</code></pre></div>\n<ol>\n<li>데코레이터 구현 및 해당 유저 정보 확인\n=> 데코레이터를 만들기 위해 다중 함수 구현, 받은 데이터 중에 토큰이 있는지 if문을 통해 확인\n=> 401에러는 권한이 없을 때 발생</li>\n<li>jwt토큰 decode<br>\n=> 받은 토큰과 기존에 저장해두었던 SECRET_KEY와 algorithm으로 토큰을 decode\n=> decode를 하게 될 경우 프론트엔드에 전달했던 페이로드값만 나옴(즉 로그인뷰에 바디)</li>\n<li>decode한 토큰과 일치하는 유저 정보를 변수에 저장\n=>Query문을 이용해 DB에 접근하여 원하는 데이터를 가져온다\n=>get메소드를 사용할 경우 DB에서 하나의 row만 가지고 옴(가로)</li>\n<li>프론트엔드에게 받은 request.user에 3번의 자료 저장\n=>프론트엔드에게 전달해주기 전 준비과정</li>\n<li>4번에 저장된 request를 데코레이터 리턴<br>\n=> 데코레이터종료 및 프론트엔드에게 해당 유저의 정보를 리턴</li>\n<li>테스트할 변수를 views.py에 테스트변수 만들고, urls를 통해 url을 연결한 후  결과가 잘 나오는지 확인  </li>\n</ol>\n<p><code class=\"language-text\">pip install httpie</code>\n=>views.py에 아래 코드 입력, urls.py에 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#user/views.py\nfrom user.utils import login_decorator  \n\nclass Example(View):\n    @login_decorator\n    def get(self, request):\n        user = User.objects.get(id = 11)\n        return JsonResponse({\n            &#39;user_name&#39;    : user.name            \n        })\n\n#user/urls.py\nfrom .views import Example\n\nurlpatterns = [\n    path(&#39;/a&#39;, Example.as_view())\n    ]</code></pre></div>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>어떻게 보면 정말 간단한 함수처럼 보이지만 이제 막 개발을 시작하거나 데코레이터를 실전(?)에서 어떻게 써야 하는지 위 자료를 토대로 조금이나마 도움이 됐으면 합니다.</p>","fields":{"slug":"/posts/perfecting-the-art-of-perfection/","tagSlugs":["/tag/python-3/","/tag/wecode/","/tag/django/"]},"frontmatter":{"date":"2019-07-10T23:46:37.121Z","description":"Python3 pyJWT를 이용한 파이썬 로그인 데코레이터 구현","tags":["Python3","Wecode","Django"],"title":"pyJWT를 이용한 Python Django Login Decorator"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/perfecting-the-art-of-perfection/"}}}